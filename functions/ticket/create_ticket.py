from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from config import ADMIN_ID, db, bot
from functions.ticket.log_ticket import log_ticket_message

router = Router()

class MessageState(StatesGroup):
    waiting_for_message = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±–µ–∫–∞ /create-ticket
@router.callback_query(lambda c: c.data == 'create-ticket')
async def create_ticket(callback_query: CallbackQuery, state: FSMContext):
    uid = callback_query.from_user.id
    access = await db.get_bot_mode()
    if access['mode'] == 'activate' or str(uid) == ADMIN_ID:
        bt1 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='start')

        await callback_query.message.edit_text(
            f'<b>üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞</b>\n\n–ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∏–∫–µ—Ç–∞ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑–¥–µ–ª—É <b>FAQ (—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã)</b>, –±—ã—Ç—å –º–æ–∂–µ—Ç, —Ç–∞–º —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å!\n\n<i>–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è (–æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç:</i>',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[bt1]]),
            parse_mode='HTML'
        )

        await state.set_state(MessageState.waiting_for_message)
    else:
        await callback_query.message.answer('üîÑÔ∏è –°–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö, —Å–∫–æ—Ä–æ –≤—Å—ë –ø—Ä–∏–¥—ë—Ç –≤ –Ω–æ—Ä–º—É')
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã)
@router.message(MessageState.waiting_for_message)
async def wait_question(message: Message, state: FSMContext):
    uid = message.from_user.id
    bt1 = InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')
    res = {}
    if message.text:
        res = await db.create_ticket(uid, message.text.strip())
    elif message.caption:
        res = await db.create_ticket(uid, message.caption.strip())

    if res['status']:
        n = '0' * (5 - len(str(res['id']))) + str(res['id'])
        log_ticket_message(n, message)
        bt2 = InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f'close-ticket_{res['id']}')

        await message.answer(
            f'üìÑ *–¢–∏–∫–µ—Ç ‚Ññ{n}*\n'
            f'```\n{message.text}\n```'
            '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç!\n\n'
            '–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî *–∑–∞–∫—Ä–æ–π—Ç–µ —Ç–∏–∫–µ—Ç*, —á—Ç–æ–±—ã –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n'
            '_P.S. –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 10:00 - 20:00 (–ú–°–ö) üïõ_',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[bt2], [bt1]]),
            parse_mode='Markdown'
        )
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f'–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç ‚Ññ{res['id']}\n```\n{message.text or message.caption}\n```',
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∏–∫–µ—Ç—É', callback_data=f'goto-ticket_{res['id']}_{uid}')
            ]])
        )

    else:
        if res['error'] == 'duplicate':
            await message.answer(
                f'‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –¥—Ä—É–≥–æ–π\n\n–ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @sselanium, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[bt1]]),
            )
        else:
            await message.answer(
                f'```\n{message.text}\n```'
                '‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ç–∞–∫–æ–µ —Å–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–¥–∫–æ, –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @sselanium\n\n',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[bt1]]),
                parse_mode='Markdown'
            )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()